(window.webpackJsonp = window.webpackJsonp || []).push([[23], { "./components/collapsible/collapsible.js": function (t, e, i) { "use strict"; i.r(e), i.d(e, "default", (function () { return s })); class s { constructor(t) { this.saveState = "true" === t.getAttribute("data-save-state"), this.group = t.getAttribute("data-group"), this.isAccordion = t.classList.contains("collapsible--accordion"), this.collapsible = t, this.collapsibleHeader = this.collapsible.querySelector(".js-collapsible-heading"), this.content = this.collapsible.querySelector(".js-collapsible-content"), this.button = this.collapsible.querySelector(".js-collapsible-button"), this.buttonInner = this.collapsible.querySelector(".js-collapsible-button-inner"); var e = t.getAttribute("id"); this.button && (this.button.addEventListener("click", this.toggle.bind(this)), this.button.setAttribute("aria-controls", e), this.button.classList.remove("u-d-no"), this.buttonOpen = this.buttonInner.innerHTML.trim(), this.closeButton = this.collapsible.getAttribute("data-btn-close") || this.buttonOpen), this.collapsible.setAttribute("role", "group"), this.collapsibleHeader.setAttribute("role", "link"), this.collapsibleHeader.setAttribute("aria-controls", e), this.isAccordion || this.collapsibleHeader.setAttribute("tabindex", 0), localStorage.getItem(e) ? this.setOpen(!0) : this.setOpen(!1), this.collapsibleHeader.addEventListener("click", this.toggle.bind(this)), this.collapsibleHeader.addEventListener("keydown", this.keyboardInteraction.bind(this)), this.collapsible.classList.add("collapsible--initialised") } toggle(t) { t.preventDefault(), this.previousTimestamp !== t.timeStamp && (this.previousTimestamp = t.timeStamp, this.setOpen(!this.isOpen)) } setOpen(t) { if (t !== this.isOpen) { var e = t ? "set" : "remove", i = t ? "add" : "remove", s = t ? "Open" : "Close"; this.isOpen = t, this.collapsible["".concat(e, "Attribute")]("open", ""), this.collapsible.classList[i]("collapsible--open"), this.collapsibleHeader.setAttribute("aria-expanded", t), this.content.setAttribute("aria-hidden", !t), this.collapsibleHeader.setAttribute("data-ga-action", "".concat(s, " panel")), this.button && (this.button.setAttribute("data-ga-action", "".concat(s, " panel")), this.buttonInner.innerHTML = t ? this.closeButton : this.buttonOpen), this.onOpen && this.onClose && (t ? this.onOpen() : this.onClose()) } !0 === this.saveState && !0 === t ? localStorage.setItem(this.collapsible.getAttribute("id"), !0) : localStorage.removeItem(this.collapsible.getAttribute("id")) } keyboardInteraction(t) { switch (t.which) { case 13: case 32: t.preventDefault(), t.stopPropagation(), this.toggle(t) } } } } }]);